--[[
    pallenec util.pln --emit-lua
--]]

local util:module = {}

typealias vector3 = { x:float,y:float,z:float}
typealias vector2 = { x:float,y:float,z:float}

util.math = 
{
    vec2 = 
    {
        new = function(x: float, y: float): {x:float,y:float,z:float}
            return {x=x, y=y, z=z}
        end,
        sub = function(vec0:vector2,vec1:vector2):vector2
            return 
            {
                x = vec0.x - vec1.x,
                y = vec0.y - vec1.y
            }
        end,
        add = function(vec0:vector2,vec1:vector2):vector2
            return 
            {
                x = vec0.x + vec1.x,
                y = vec0.y + vec1.y
            }
        end,
        div = function(vec0:vector2,vec1:vector2):vector2
            return 
            {
                x = vec0.x / vec1.x,
                y = vec0.y / vec1.y
            }
        end,
        mod = function(vec0:vector2,vec1:vector2):vector2
            return 
            {
                x = vec0.x % vec1.x,
                y = vec0.y % vec1.y
            }
        end,
        mul = function(vec0:vector2,vec1:vector2):vector2
            return 
            {
                x = vec0.x * vec1.x,
                y = vec0.y * vec1.y
            }
        end,
    }

    vec3 = 
    {
        new = function(x: float, y: float, z: float):vector3
            return {x=x, y=y, z=z}
        end,
        sub = function(vec0:vector3,vec1:vector3):vector3
            return 
            {
                x = vec0.x - vec1.x,
                y = vec0.y - vec1.y,
                z = vec0.z - vec1.z
            }
        end,
        add = function(vec0:vector3,vec1:vector3):vector3
            return 
            {
                x = vec0.x + vec1.x,
                y = vec0.y + vec1.y,
                z = vec0.z + vec1.z
            }
        end,
        mul = function(vec0:vector3,vec1:vector3):vector3
            return 
            {
                x = vec0.x * vec1.x,
                y = vec0.y * vec1.y,
                z = vec0.z * vec1.z
            }
        end,
        div = function(vec0:vector3,vec1:vector3):vector3
            return 
            {
                x = vec0.x / vec1.x,
                y = vec0.y / vec1.y,
                z = vec0.z / vec1.z
            }
        end,
        mod = function(vec0:vector3,vec1:vector3):vector3
            return 
            {
                x = vec0.x % vec1.x,
                y = vec0.y % vec1.y,
                z = vec0.z % vec1.z
            }
        end,
    }
}

return util