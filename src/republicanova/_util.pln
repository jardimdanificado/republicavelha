--[[
    pallenec _util.pln --emit-lua
--]]

local util:module = {}

typealias vector3 = { x:float,y:float,z:float}
typealias vector2 = { x:float,y:float}

function util.vec2(x:float, y:float):vector2
    return {x=x, y=y}
end

function util.vec2add(vec0:vector2, vec1:vector2):vector2
    return 
    {
        x = vec0.x + vec1.x,
        y = vec0.y + vec1.y
    }
end

function util.vec2sub(vec0:vector2, vec1:vector2):vector2
    return 
    {
        x = vec0.x - vec1.x,
        y = vec0.y - vec1.y
    }
end

function util.vec2div(vec0:vector2, vec1:vector2):vector2
    return 
    {
        x = vec0.x / vec1.x,
        y = vec0.y / vec1.y
    }
end

function util.vec2mod(vec0:vector2, vec1:vector2):vector2
    return 
    {
        x = vec0.x % vec1.x,
        y = vec0.y % vec1.y
    }
end

function util.vec2mul(vec0:vector2, vec1:vector2):vector2
    return 
    {
        x = vec0.x * vec1.x,
        y = vec0.y * vec1.y
    }
end

function util.vec3(x: float, y: float, z: float):vector3
    return {x=x, y=y, z=z}
end

function util.vec3add(vec0:vector3, vec1:vector3):vector3
    return 
    {
        x = vec0.x + vec1.x,
        y = vec0.y + vec1.y,
        z = vec0.z + vec1.z
    }
end

function util.vec3sub(vec0:vector3, vec1:vector3):vector3
    return 
    {
        x = vec0.x - vec1.x,
        y = vec0.y - vec1.y,
        z = vec0.z - vec1.z
    }
end

function util.vec3mul(vec0:vector3, vec1:vector3):vector3
    return 
    {
        x = vec0.x * vec1.x,
        y = vec0.y * vec1.y,
        z = vec0.z * vec1.z
    }
end

function util.vec3div(vec0:vector3, vec1:vector3):vector3
    return 
    {
        x = vec0.x / vec1.x,
        y = vec0.y / vec1.y,
        z = vec0.z / vec1.z
    }
end

function util.vec3mod(vec0:vector3, vec1:vector3):vector3
    return 
    {
        x = vec0.x % vec1.x,
        y = vec0.y % vec1.y,
        z = vec0.z % vec1.z
    }
end

function util.limitTo(value:integer, min:integer, max:integer):integer
    if value > max then
		while (value > max) do
			value = value - (max - min)
        end
	end
	if (value < min) then
		while (value < min) do
            value = value + (max - min)
        end
    end
	return value
end

return util